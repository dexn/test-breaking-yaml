esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  area: ${room}
  name_add_mac_suffix: true
  project:
    name: ${project_name}
    version: ${project_version}

esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 5min

# Enable logging
logger:

api:

ota:
  - platform: esphome

mdns:
  disabled: false

web_server:
  port: 80

wifi:
  ap: {}
  fast_connect: "${wifi_fast_connect}"
  domain: "${dns_domain}"

captive_portal:

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic    

sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal
    name: WiFi Signal Sensor
    update_interval: 60s

button:
  - platform: factory_reset
    name: Factory Reset
    id: Reset
    entity_category: config


  - platform: restart
    name: Restart_esp
    id: restart_esp
    entity_category: config
    internal: true

  - platform: template
    name: Restart device
    id: restart_device
    entity_category: config

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: Connected SSID
    mac_address:
      name: Mac Address

time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min to 6 hours
    update_interval: 360min    
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
